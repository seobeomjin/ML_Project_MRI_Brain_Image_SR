# -*- coding: utf-8 -*-
"""Data_Provider_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uw71tr3l0zPS6kCotF_4Jg0N-Lwl9-Et
"""

#from google.colab import drive 
#drive.mount('/content/gdrive')
#import sys 
#sys.path.append("/content/gdrive/My Drive/Colab Notebooks")

import torch 
import numpy as np 
import math 
import glob 
from PIL import Image
import torchvision 
from torchvision import datasets, models, transforms
import time
import os
import subprocess
import pandas as pd
from torch.utils.data.dataset import Dataset
import scipy.io
#import nibabel as nib

class DataProvider(Dataset):
    def __init__(self,csv_path,data_path):
        self.data = pd.read_csv(csv_path)
        self.data_path = data_path
        self.is_transform = True 

    def transform(self, image):
        '''
        This function transform the 3D image of np.ndarray (z,x,y) to a torch.ShortTensor (B,z,x,y).

        '''
        image_torch = torch.ShortTensor(image)
        return image_torch

    
    def __getitem__(self,idx):
        #hcp_mprage_data_path_example 
        #HCP_mgh_1035_MR_MPRAGE_GradWarped_and_Defaced_Br_20140919135823853_S227866_I444361
        #HCP_mgh_1034_MR_MPRAGE_GradWarped_and_Defaced_Br_20140919135814531_S227856_I444360
        
        img_id = str(self.data.iloc[idx,0])

        hr_path = self.data_path + 'HCP_1200_NPY/' + img_id + '_3T_T1w_MPR1.npy'
        lr_path = self.data_path + 'HCP_1200_NPY_LR_/' + img_id + '_3T_T1w_MPR1_LR.npy'

        #if not os.path.exists(hr_path):
        #    while (not os.path.exists(hr_path) or not os.path.exists(hr_path)) :
        #        img_id = str(int(img_id)+1) 
        #        hr_path = self.data_path + 'HCP_1200_NPY/' + img_id + '_3T_T1w_MPR1.npy'
        #        lr_path = self.data_path + 'HCP_1200_NPY/' + img_id + '_3T_T1w_MPR1_LR.npy'
            

        #change npy to numpy
        hr_npy = np.load(hr_path)
        hr_img = np.array(hr_npy, dtype = np.float32)

        lr_npy = np.load(lr_path)
        lr_img = np.array(lr_npy, dtype = np.float32)
                
        if(self.is_transform):
            sample_lr = self.transform(lr_img)
            sample_hr = self.transform(hr_img)
    
        return (sample_lr,sample_hr)

    def __len__(self):
        return len(self.data)